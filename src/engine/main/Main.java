package engine.main;

import java.awt.Canvas;
import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.image.BufferStrategy;
import java.awt.image.BufferedImage;
import java.awt.image.DataBufferInt;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;

import javax.swing.JFrame;

import engine.main.keys.InputHandler;
import engine.main.render.Screen;
import engine.main.render.TileData;
import engine.main.render.TileData.Tile;
import engine.main.render.core.lighting.AreaLight;
import engine.main.render.sprites.SheetList;
import engine.main.render.sprites.SpriteSheet;
import engine.main.render.sprites.entities.AnimatedSprite;
import engine.main.render.sprites.entities.Mob;
import engine.main.render.sprites.entities.Player;
import engine.main.render.sprites.entities.Sprite;

public class Main extends Canvas implements Runnable{

	private static final long serialVersionUID = 1L;
	public static String title;
	public static int width = 0;
	public static int height = 0;
	public static int scale = 0;
	
	public static String resLocation;
	public static String location;
	
	public BufferedImage img;
	public int[] pixels;
	
	public boolean running = false;
	public static boolean resizeable = false;
	
	private Screen screen;
	
	public static InputHandler input;
	
	public static JFrame frame;
	
	public static List<String[]> levelData = new ArrayList<String[]>();
	
	public Main(){
		Dimension size = new Dimension(width, height);
		
		setPreferredSize(size);
		setMinimumSize(size);
		setMaximumSize(size);
	}
	
	public synchronized void start(){
		if(running){
			return;
		}
		running = true;
		initalizeVariables();
		run();
	}
	
	public synchronized void stop(){
		if(!running){
			return;
		}
		running = false;
	}
	
	public void init(){
		img = new BufferedImage(width, height, BufferedImage.TYPE_INT_RGB);
		pixels = ((DataBufferInt)img.getRaster().getDataBuffer()).getData();
		screen = new Screen(width, height, scale, Main.resLocation + "levels/level1/level1.png");
		input = new InputHandler(this);
	}
	
	//all the code to do with timing within this loop keeps the game updating (running tick) at 60 times per second
	//even if the frame rate is running lower
	public void run() {
		init();
		long lastTime = System.nanoTime();
		double nsPerTick = 1000000000D/60.0;
		
		int ticks = 0;
		int frames = 0;
		
		long lastTimer = System.currentTimeMillis();
		double delta = 0;
		
		while(running){
			long now = System.nanoTime();
			delta += (now - lastTime) / nsPerTick;
			lastTime = now;
			
			while(delta >= 1){
				ticks++;
				tick();
				delta--;
			}
			frames++;
			render();
			
			if(System.currentTimeMillis() - lastTimer >= 1000){
				lastTimer += 1000;
				System.out.println("Frames: " + frames + " Ticks: " + ticks);
				frames = 0;
				ticks = 0;
				if(resizeable){
					frame.setSize(width, height);
				}
			}
		}
		stop();
	}
	
	public void tick(){
		screen.tick();
		Timer.ticks++;
		if(resizeable){
			width = frame.getWidth();
			height = width / 16 * 9;
		}
	}
	
	public void render(){
		BufferStrategy bs = getBufferStrategy();
		if(bs == null){
			createBufferStrategy(3);
			return;
		}
		
		Graphics g = bs.getDrawGraphics();
		
		screen.clear();
		screen.render();
		
		for(int i = 0; i < pixels.length; i++){
			pixels[i] = screen.pixels[i];
		}
		
		g.drawImage(img, 0, 0, width * scale, height * scale, null);
		
		g.dispose();
		bs.show();
	}
	
	//This debug load is a link between the development environment and the engine
	//This allows for a debug run to go with all required variables set from config files
	//Generated by the IDE
	public static void debugLoad(String resLocation){
		Main main = new Main();
		frame = new JFrame();
		Main.resLocation = resLocation;
		String location = "/";
		String[] breakLoc = resLocation.split("/");
		for(int i = 1; i < breakLoc.length; i++){
			location += breakLoc[i];
			location += "/";
		}
		Main.location = location;
		
		List<String> projectData = new ArrayList<String>();
		Scanner scanner;
		try {
			scanner = new Scanner(new FileReader(Main.resLocation + "config.cfg"));
			while(scanner.hasNext()){
				projectData.add(scanner.nextLine());
			}
			Dimension size = new Dimension(Integer.parseInt(projectData.get(1)), Integer.parseInt(projectData.get(2)));
			scanner.close();
			Main.width = Integer.parseInt(projectData.get(1));
			Main.height = Integer.parseInt(projectData.get(2));
			Main.scale = Integer.parseInt(projectData.get(3));
			TileData.tileSize = Integer.parseInt(projectData.get(4));
			
			frame.add(main);
			frame.setTitle("Debug");
			frame.setResizable(false);
			frame.setVisible(true);
			frame.setSize(size);
			frame.setLocationRelativeTo(null);
			frame.addWindowListener(new WindowListener(){

				public void windowActivated(WindowEvent arg0){}

				public void windowClosed(WindowEvent arg0) {
					main.running = false;
				}

				public void windowClosing(WindowEvent arg0) {
					main.running = false;
				}

				public void windowDeactivated(WindowEvent arg0){}
				public void windowDeiconified(WindowEvent arg0){}
				public void windowIconified(WindowEvent arg0){}
				public void windowOpened(WindowEvent arg0){}
				
			});
			
			main.start();
		} catch (FileNotFoundException e) {
			e.printStackTrace();
			System.err.println("Error occured in finding the resources to run the project!");
			System.exit(1);
		}
	}
	
	/*public static void main(String args[]){
		Main main = new Main();
		frame = new JFrame();
		
		frame.add(main);
		frame.setTitle(title);
		frame.setResizable(resizeable);
		frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		frame.setVisible(true);
		frame.pack();
		frame.setLocationRelativeTo(null);
		
		main.start();
	}*/
	
	//Loading data from the IDE config files
	public void initalizeVariables(){
		System.out.println("Variable Initialisation");
		try {
			int z = 0;
			String[] holder = new String[4];
			List<String[]> tempLevelData = new ArrayList<String[]>();
			Scanner scanner = new Scanner(new FileReader(Main.resLocation + "levels/config.cfg"));
			while(scanner.hasNext()){
				holder[z] = scanner.nextLine();
				z++;
				if(z == holder.length){
					tempLevelData.add(holder);
					z = 0;
					holder = new String[4];
				}
			}
			levelData = tempLevelData;
			
			List<SpriteSheet> sheets = new ArrayList<SpriteSheet>();
			scanner = new Scanner(new FileReader(Main.resLocation + "spriteSheets/config.cfg"));
			sheets.add(new SpriteSheet(Main.resLocation + "spriteSheets/void.png"));
			sheets.add(new SpriteSheet(Main.resLocation + "spriteSheets/voidSprite.png"));
			while(scanner.hasNext()){
				sheets.add(new SpriteSheet(Main.resLocation + "spriteSheets/" + scanner.nextLine()));
			}
			SheetList.sheets = sheets;
			
			List<Tile> tiles = new ArrayList<Tile>();
			List<String[]> baseData = new ArrayList<String[]>();
			scanner = new Scanner(new FileReader(Main.resLocation + "spriteSheets/tiles/id.dat"));
			while(scanner.hasNext()){
				baseData.add(scanner.nextLine().split(","));
			}
			for(int i = 0; i < baseData.size(); i++){
				scanner = new Scanner(new FileReader(Main.resLocation + "spriteSheets/tiles/" + baseData.get(i)[1] + ".td"));
				String[] tileData = new String[6];
				z = 0;
				while(scanner.hasNext()){
					tileData[z] = scanner.nextLine();
					z++;
				}
				tiles.add(new Tile(Integer.parseInt(tileData[1]), Integer.parseInt(tileData[4]), Integer.parseInt(tileData[5]), 1, 1, SheetList.getSheet(tileData[3]), false, Integer.parseInt(tileData[2]), 0));
			}
			Tile[] tileArray = new Tile[tiles.size()];
			for(int i = 0; i < tileArray.length; i++){
				tileArray[i] = tiles.get(i);
			}
			TileData.tiles = tileArray;
			
			scanner = new Scanner(new FileReader(Main.resLocation + "spriteSheets/sprites/id.dat"));
			List<Sprite> sprites = new ArrayList<Sprite>();
			List<String[]> spriteData = new ArrayList<String[]>();
			while(scanner.hasNext()){
				spriteData.add(scanner.nextLine().split(","));
			}
			for(int i = 0; i < spriteData.size(); i++){
				scanner = new Scanner(new FileReader(Main.resLocation + "spriteSheets/sprites/" + spriteData.get(i)[1] + ".sd"));
				String[] spriteDataArray = new String[11];
				z = 0;
				while(scanner.hasNext()){
					spriteDataArray[z] = scanner.nextLine();
					z++;
				}
				if(spriteDataArray[1].equals("void")){
					Sprite.nullSprite = new AnimatedSprite((Integer.parseInt(spriteDataArray[0])), TileData.tileSize * Integer.parseInt(spriteDataArray[5]), TileData.tileSize * Integer.parseInt(spriteDataArray[6]), 0, 0, Integer.parseInt(spriteDataArray[3]), Integer.parseInt(spriteDataArray[4]), true, false, SheetList.getSheet(spriteDataArray[2]), Integer.parseInt(spriteDataArray[9]), Integer.parseInt(spriteDataArray[10]), Integer.parseInt(spriteDataArray[7], 16), 0);
					Sprite.animSprites.add(new AnimatedSprite(Integer.parseInt(spriteDataArray[0]), TileData.tileSize * Integer.parseInt(spriteDataArray[5]), TileData.tileSize * Integer.parseInt(spriteDataArray[6]), 0, 0, Integer.parseInt(spriteDataArray[3]), Integer.parseInt(spriteDataArray[4]), true, false, SheetList.getSheet(spriteDataArray[2]), Integer.parseInt(spriteDataArray[9]), Integer.parseInt(spriteDataArray[10]), Integer.parseInt(spriteDataArray[7], 16), 0));
				}
				else if(spriteDataArray[8].equals("Sprite") || spriteDataArray[8].equals("Animated Sprite")){
					Sprite.animSprites.add(new AnimatedSprite(Integer.parseInt(spriteDataArray[0], 16), TileData.tileSize * Integer.parseInt(spriteDataArray[5]), TileData.tileSize * Integer.parseInt(spriteDataArray[6]), 0, 0, Integer.parseInt(spriteDataArray[3]), Integer.parseInt(spriteDataArray[4]), true, true, SheetList.getSheet(spriteDataArray[2]), Integer.parseInt(spriteDataArray[9]), Integer.parseInt(spriteDataArray[10], 16), Integer.parseInt(spriteDataArray[7], 16), 0));
				}
				else if(spriteDataArray[8].equals("Light Source")){
					Sprite.areaLights.add(new AreaLight(Integer.parseInt(spriteDataArray[0]), TileData.tileSize * Integer.parseInt(spriteDataArray[5]), TileData.tileSize * Integer.parseInt(spriteDataArray[6]), 0, 0, Integer.parseInt(spriteDataArray[3]), Integer.parseInt(spriteDataArray[4]), 10, true, true, true, SheetList.getSheet(spriteDataArray[2]), Integer.parseInt(spriteDataArray[9]), Integer.parseInt(spriteDataArray[10]), Integer.parseInt(spriteDataArray[7], 16), 0));
				}
				else if(spriteDataArray[8].equals("Mob")){
					Sprite.mobs.add(new Mob(Integer.parseInt(spriteDataArray[0]), TileData.tileSize * Integer.parseInt(spriteDataArray[5]), TileData.tileSize * Integer.parseInt(spriteDataArray[6]), 0, 0, Integer.parseInt(spriteDataArray[3]), Integer.parseInt(spriteDataArray[4]), 1, 10, 1, true, SheetList.getSheet(spriteDataArray[2]), Integer.parseInt(spriteDataArray[9]), Integer.parseInt(spriteDataArray[10]), Integer.parseInt(spriteDataArray[7], 16), 0));
				}
				else if(spriteDataArray[8].equals("Player")){
					Sprite.player = new Player(0, 0, TileData.tileSize * Integer.parseInt(spriteDataArray[5]), TileData.tileSize * Integer.parseInt(spriteDataArray[6]), Integer.parseInt(spriteDataArray[3]), Integer.parseInt(spriteDataArray[4]), 1, 10, 1, Integer.parseInt(spriteDataArray[9]), Integer.parseInt(spriteDataArray[10]), Integer.parseInt(spriteDataArray[7]), SheetList.getSheet(spriteDataArray[2]));
				}
			}

			for(int i = 0; i < Sprite.animSprites.size(); i++){
				sprites.add(Sprite.animSprites.get(i));
			}
			for(int i = 0; i < Sprite.areaLights.size(); i++){
				sprites.add(Sprite.areaLights.get(i));
			}
			for(int i = 0; i < Sprite.mobs.size(); i++){
				sprites.add(Sprite.mobs.get(i));
			}
			sprites.add(Sprite.player);
			
			Sprite.sprites = new Sprite[sprites.size()];
			for(int i = 0; i < Sprite.sprites.length; i++){
				Sprite.sprites[i] = sprites.get(i);
			}
			scanner.close();
		} catch (FileNotFoundException e) {
			e.printStackTrace();
			System.err.println("Attempted to load level data but an error occured!");
			System.exit(1);
		}
	}
	
}
